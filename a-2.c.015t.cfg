
;; Function main (main, funcdef_no=0, decl_uid=2380, cgraph_uid=1, symbol_order=0)

Removing basic block 18
Merging blocks 16 and 17
;; 5 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17
;;
;; Loop 3
;;  header 15, latch 14
;;  depth 1, outer 0
;;  nodes: 15 14
;;
;; Loop 2
;;  header 12, latch 11
;;  depth 1, outer 0
;;  nodes: 12 11 10 6 9 7 8
;;
;; Loop 4
;;  header 10, latch 9
;;  depth 2, outer 2
;;  nodes: 10 9 7 8
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 12 }
;; 6 succs { 10 }
;; 7 succs { 8 9 }
;; 8 succs { 9 }
;; 9 succs { 10 }
;; 10 succs { 7 11 }
;; 11 succs { 12 }
;; 12 succs { 6 13 }
;; 13 succs { 15 }
;; 14 succs { 15 }
;; 15 succs { 14 16 }
;; 16 succs { 17 }
;; 17 succs { 1 }
int main ()
{
  int xxx;
  int temp;
  int pos;
  int list[10];
  int sizelist;
  int j;
  int i;
  int small;
  int num;
  int D.2410;

  <bb 2> :
  printf ("\nEnter the size of list :\n ");
  scanf ("%d", &sizelist);
  i = 0;
  goto <bb 4>; [INV]

  <bb 3> :
  printf ("\nEnter the number");
  _1 = &list[i];
  scanf ("%d", _1);
  i = i + 1;

  <bb 4> :
  sizelist.0_2 = sizelist;
  if (i < sizelist.0_2)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  i = 0;
  goto <bb 12>; [INV]

  <bb 6> :
  small = list[i];
  pos = i;
  j = i + 1;
  goto <bb 10>; [INV]

  <bb 7> :
  _3 = list[j];
  if (small > _3)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  small = list[j];
  pos = j;

  <bb 9> :
  j = j + 1;

  <bb 10> :
  sizelist.1_4 = sizelist;
  if (j < sizelist.1_4)
    goto <bb 7>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 11> :
  temp = list[i];
  _5 = list[pos];
  list[i] = _5;
  list[pos] = temp;
  i = i + 1;

  <bb 12> :
  sizelist.2_6 = sizelist;
  if (i < sizelist.2_6)
    goto <bb 6>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 13> :
  xxx = 2;
  printf ("\nList of the numbers in ascending order : ");
  i = 0;
  goto <bb 15>; [INV]

  <bb 14> :
  _7 = list[i];
  printf ("\n%d", _7);
  i = i + 1;

  <bb 15> :
  sizelist.3_8 = sizelist;
  if (i < sizelist.3_8)
    goto <bb 14>; [INV]
  else
    goto <bb 16>; [INV]

  <bb 16> :
  D.2410 = 0;
  sizelist = {CLOBBER(eol)};
  list = {CLOBBER(eol)};

  <bb 17> :
<L15>:
  return D.2410;

}


